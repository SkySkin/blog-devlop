name: Blog Build on started
on:
  watch:
    types: started #进行star时触发


jobs:
  blog-build-started:
    name: blog-build-started-job
    if: github.event.repository.owner.id == github.event.sender.id    
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 系统作为编译部署的环境
    steps:
    - name: Checkout codes
      uses: actions/checkout@v2

    - name: Compare GitCommitIimeGithub And GitCommitIimeGitee
      run: |
        pwd
        #得到github项目对应的最后提交时间
        gitCommitIimeGithub=$(date --date="$(git show --pretty=format:"%ci" | head -1)" "+%Y-%m-%d %H:%M:%S")
        echo '得到github项目对应的最后提交时间[gitCommitIimeGithub]='${gitCommitIimeGithub}       

        #得到github项目对应的最后提交时间秒数
        gitHUBCommit_seconds=$(date --date="${gitCommitIimeGithub}" +%s)   
        echo '得到github项目对应的最后提交时间秒数[gitHUBCommit_seconds]='${gitHUBCommit_seconds}

        #创建临时文件拉取gitee
        echo '创建临时文件拉取gitee'
        mkdir tempCloneDir
        cd ./tempCloneDir/
        pwd
        git clone https://gitee.com/skyskin/blog-devlop.git #gitee blog-仓库地址
        git config --global http.postBuffer 1024M
        cd ./blog-devlop/

        #得到gitee项目对应的最后提交时间
        gitCommitIimeGitee=$(date --date="$(git show --pretty=format:"%ci" | head -1)" "+%Y-%m-%d %H:%M:%S")
        echo '得到gitee项目对应的最后提交时间[gitCommitIimeGitee]='${gitCommitIimeGitee}

        #得到gitee项目对应的最后提交时间秒数
        gitEECommit_seconds=$(date --date="${gitCommitIimeGitee}" +%s)
        echo '得到gitee项目对应的最后提交时间秒数[gitEECommit_seconds]='${gitEECommit_seconds}
      
        #得到 (github提交时间 -  gitee提交时间)
        GITHUB_GITEE="$((gitHUBCommit_seconds-gitEECommit_seconds))"
        echo '得到 (github提交时间 -  gitee提交时间)[GITHUB_GITEE]='${GITHUB_GITEE}
        echo "GITHUB_GITEE_TIME="${GITHUB_GITEE} >> $GITHUB_ENV
      #判断，如果小于0，则gitee版本要高，需要进行吧gitee的代码hexo进行编译，然后提交，然后再通过第三方库Yikun/gitee-mirror-action@v0.01，
      #把gitee代码仓库同步到github
    - name: Setup node
      # 设置 node.js 环境
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Cache node modules
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      # 设置包缓存目录，避免每次下载
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install hexo dependencies
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      # 下载 hexo-cli 脚手架及相关安装包
      run: |
        cd ./tempCloneDir/blog-devlop/
        npm install -g hexo-cli
        npm install

    - name: Generate files
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      # 编译 markdown 文件
      run: |
        cd ./tempCloneDir/blog-devlop/
        hexo clean
        hexo generate

    - name: Deploy hexo blog
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      env: 
        # Github dev仓库
        GITHUB_DEV_REPO: github.com/SkySkin/blog-devlop.git
        # Github blog展示仓库
        GITHUB_REPO: github.com/SkySkin/skyskin.github.io.git
        # Coding 仓库io
        #CODING_REPO: e.coding.net/yifanzheng/blogs.git
        # Gitee blog展示仓库
        GITEE_REPO: gitee.com/skyskin/skyskin.git
      # 将编译后的博客文件推送到指定仓库
      run: |
        cd ./tempCloneDir/blog-devlop/
        cd ./public && git init && git add .
        git config user.name "zeyue"
        git config user.email "981484060@qq.com"
        git add .
        git commit -m "GitHub Actions Auto Builder at $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
        git push --force --quiet "https://skyskin:${{ secrets.GITEE_TOKEN }}@$GITEE_REPO" master:master
        git push --force --quiet "https://${{ secrets.ACCESS_TOKEN }}@$GITHUB_REPO" master:master
        
        #将当前的blog-dev推送至github,使得4个仓库两两一致，达到目的
        rm -rf ./.git
        cd ..
        git push --force --quiet "https://${{ secrets.ACCESS_TOKEN }}@$GITHUB_DEV_REPO" master:master
#        git push --force --quiet "https://SkySkin:${{ secrets.CODING_TOKEN }}@$CODING_REPO" master:master
    - name: Build Gitee Pages
      if: ${{env.GITHUB_GITEE_TIME < 0}}
      uses: yanglbme/gitee-pages-action@master
      with:
       # 注意替换为你的 Gitee 用户名
       gitee-username: skyskin
       # 注意在 Settings->Secrets 配置 GITEE_PASSWORD
       gitee-password: ${{ secrets.GITEE_PASSWORD }}
       # 注意替换为你的 Gitee 仓库
       gitee-repo: skyskin/skyskin




